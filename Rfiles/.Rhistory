install.packages(swirl)
install.packages("swirl")
library("swirl")
swirl()
5+7
x <- 5+7
x
x-3
y<-x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
sqrt(Z-1)
sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) + c(0, 10,100)
z*2+100
z*2+1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by = 0.5)
my_seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times =10)
rep(c(0, 1, 2), each =10)
clc
A <- factor(c("big", "big","small","big"))
print(A)
table(A)
unclass(A)
M <- matrix(1:6, ncol=2, nrow =3)
M
M[1]
M[2]
M[]
M[1:6]
M[2,]
M[2,2]
M[3,2]
M[,2]
colnames(M) <- c('C1', 'C2')
rownames(M) <- c('A', 'B','C')
M$r1
M[r1,]
M[C1,]
M[C,]
M[C]
M['C']
M
M$C1
M[A,C1]
M
M['A',]
M['B',]
M['C',]
M[,'C1']
M[,'C2']
M['A','C2']
data.frame(M)
M$A
M$C
Mdata <- data.frame(M)
Mdata
Mdata$C1
Mdata <- data.frame(M)
library(ggplot2)
qplot(C1, C2, data = Mdata)
x <- data.frame(foo = 1:4, bar = c("A","B","C","D"), thr= c(T,T,F,T))
print(x)
nrow(x)
ncol(x)
mrg
print(mpg)
names(mpg)
head(mpg)
tail(mpg)
names(X)
names(X)x
names(x)
str(x)
x$foo
x$bar
x[2,1]
x[2,2]
x[2,]
x[2,'bar']
x$bar
x$foo
dim(x)
nrow(x)
dim(mpg)
? mpg
str(mpg)
typeof(1)
typeof(1.2)
summary(mpg)
summary(x)
summary(M)
qplot(displ, drv)
qplot(displ, drv, data =mpg)
qplot(displ,  data =mpg)
list(myvector = 1:5, mymatrix = M, mydata = x)
mylist <- list(myvector = 1:5, mymatrix = M, mydata = x)
mylist
summary(mylist)
mylist$myvector
mylist$myvector[1]
mylist$mymatrix[2,]
mylist$mydata$foo
mylist$mydata$bar
Sys.time()
production <- read.table("http://www.stat.tamu.edu/~sheather/book/docs/datasets/production.txt",
header=T,
sep="")
plot(RunTime ~ RunSize)
production
plot(production$RunTime ~ production$RunSize)
plot(production$RunTime , production$RunSize)
plot(production$RunTime ~ production$RunSize)
plot(production$RunTime , production$RunSize)
plot(production$RunTime ~ production$RunSize)
production.lm <- lm(RunTime ~ RunSize ,
data=production)
summary(production.lm)
anova(production.lm)
pred_production <- predict(production.lm , interval="confidence")
pred_production
plot(production$RunSize, pred_production$fit)
plot(production$RunSize, pred_production[1,])
plot(production$RunSize, pred_production[,1])
# examples
# examples
x <- list(a = c(1,2,3,4), b = rnorm (10))
x
lapply(x, mean)
lapply(x, length)
y <- list( A = runif(1,0,1), B = runif(2,0,2), C = runif(3,0,3))
y
lapply(y, function(Z) Z[length(Z)])
xmean <- lapply(x, mean)
class(xmean)
lapply(y, function(N) max(N)/2)
lapply(y, function(N) max(N)/min(N))
x$a
x$a[3] = NaN
x$a
xmean <- lapply(x, mean)
xmean
lapply(x, mean, na.rm = TRUE)
lapply(x, mean)
is.nan(Na)
is.nan(NA)
is.na(NaN)
T <- list(1,2,3,4)
Q <- lapply(T, runif, min = 0, max = 10 )
Q
Q$1
Q$[1]
Q[1]
sapply(y, function(Z) Z[length(Z)])
A<-sapply(y, function(Z) Z[length(Z)])
class(A)
is.vector(A)
sapply(y, function(Z) Z[c(1,length(Z))])
lapply(1:3/3,round, digit=3)
round(1/3, digit=2)
sapply(1:3, function(x) x^2)
lapply(1:3, function(x) x^2)
sapply(1:3, function(x) x^2)
sapply(1:3, function(x) c(x^2 x^3)
sapply(1:3, function(x) c(x^2 x^3))
sapply(1:3, function(x) c(x^2, x^3))
sapply(1:3, function(x) c(x^2, x^3))
is.matrix(sapply(1:3, function(x) c(x^2, x^3)))
sapply(1:3, function(x) seq(1, length(3), by = 0.5))
sapply(1:3, function(x) seq(1, length(x), by = 0.5))
sapply(1:3, function(x) seq(1, length(x))
)
sapply(1:3, function(x) seq(1, x
)
)
sapply(1:3, function(x) seq(1, x, by = 0.5)
)
library(datasets)
library(ggplot2) # used in making pretty plots
# Check the [document of ToothGrowth data](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/ToothGrowth.html)
# exploratory data analysis
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth,3)
tail(ToothGrowth,3)
avg <- aggregate(len~.,data=ToothGrowth,mean)
avg
g <- ggplot(aes(x=dose, y = len), data = ToothGrowth) +
geom_point(aes(color = supp))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
print(g)
summary(ToothGrowth)
TG_summary <- ddply(ToothGrowth,.(dose, supp), summarize, mean = mean(len), sd = sd(len))
TG_summary
TG_summary <- ddply(ToothGrowth,.(dose, supp), summarize, mean = mean(len), sd = sd(len))
library(plyr)
TG_summary <- ddply(ToothGrowth,.(dose, supp), summarize, mean = mean(len), sd = sd(len))
TG_summary
is.factor(TG_summary$dose)
as.factor(TG_summary$dose)
g <- ggplot(aes(x=dose, y = len), data = ToothGrowth) +
geom_point(aes(color = supp))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
print(g)
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp))
ggplot(aes(x = supp, y = len), data = ToothGrowth) +
geom_boxplot(aes(fill = supp)) + facet_wrap(~ dose)
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p+geom_boxplot()+facet_grid(.~supp)+labs(title = "plot1")
OJA <- ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 2] # subset of the data
VCA <- ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 2]
tA <- t.test(OJA, VCA, alternative = "two.sided", paired = FALSE, var.equal = FALSE)
OJA <- ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 2] # subset of the data
VCA <- ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 2]
tA <- t.test(OJA, VCA, alternative = "two.sided", paired = FALSE, var.equal = FALSE)
tA
OJB = ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 1]
VCB = ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 1]
tB <- t.test(OJB, VCB, alternative = "two.sided", paired = FALSE, var.equal = FALSE, conf.level = 0.95)
tB$p.value
OJC = ToothGrowth$len[ToothGrowth$supp == 'OJ' & ToothGrowth$dose == 0.5]
VCC = ToothGrowth$len[ToothGrowth$supp == 'VC' & ToothGrowth$dose == 0.5]
tC <- t.test(OJC, VCC, alternative = "two.sided", paired = FALSE, var.equal = FALSE, conf.level = 0.95)
tC$p.value
p.adjust(pvalues, method="BH")
# correction about testing multiple hypothesis
pvalues <-c(tA$p.value, tB$p.value, tC$p.value)
p.adjust(pvalues, method="BH")
qplot(ToothGrowth$len)
qplot(len,
data = ToothGrowth,
facets = supp~.,
binwidth = 2)
qplot(len,
data = ToothGrowth,
facets = supp~., facets = . ~ dose,
binwidth = 2)
# 4. State your conclusions and the assumptions needed for your conclusions.
qplot(len,
data = ToothGrowth,
facets = supp~dose,
binwidth = 2)
qplot(ToothGrowth$len)
t.test(len~supp, data = dose_0.5, two.sided = TRUE, paired = FALSE, var.equal = FALSE)
computer <- Sys.info()["nodename"]
setwd("~/Dropbox/Other_projects/BerberisEcoEvo")
setwd("~/Dropbox/Other_projects/BerberisEcoEvo/Rfiles")
# 1. save computer info in a variable
computer <- Sys.info()["nodename"]
# 2. use control loop to set working directory
if(grepl(computer, "weitingdeAir")){
setwd("/Users/weitinglin/Dropbox/Other_projects/BerberisEcoEvo/Rfiles")
}else {
if(grepl(computer, "WLIN_PC")){
#  setwd("C:/Users/Wei-Ting/Dropbox/DataCoding/R_primers/R_files")
warning("Check computer information")
} else {
warning("Check computer information")
} # end if (x...
} # end if(grep...
rm(computer) # this variable will not be used anymore
# 3. to verify the current working directory is correctly set, run the code below
getwd()
library(ape)
install.packages('ape')
install.packages('ape')
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(ape)
v <- read.tree("myPhylogeny.tre")
v <- read.tree("whaletree.tre")
is.ultrametric(v)
is.binary.tree(v)
min(v$edge.length)
url<- 'http://bamm-project.org/_downloads/whaletree.txt'
mytree <- download.file(url, 'mytree.tre')
v1 <- read.tree("mytree.tre")
is.ultrametric(v1)
is.binary.tree(v1)
min(v$edge.length)
min(v1$edge.length)
install.packages("BAMMtools")
library(BAMMtools) # Assum
setBAMMpriors(read.tree("mytree.tre"))
